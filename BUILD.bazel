# Load various rules so that we can have bazel download
# various rulesets and dependencies.
# The `load` statement imports the symbol for the rule, in the defined
# ruleset. When the symbol is loaded you can use the rule.
load("@bazel_gazelle//:def.bzl", "gazelle")
load("@pip//:requirements.bzl", "all_whl_requirements")
load("@pip//:requirements.bzl", "all_requirements")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python_gazelle_plugin//:def.bzl", "GAZELLE_PYTHON_RUNTIME_DEPS")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@io_bazel_rules_docker//python3:image.bzl", "py3_image")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")

buildifier(
    name = "buildifier",
)

compile_pip_requirements(
    name = "requirements",
    extra_args = ["--allow-unsafe"],
    requirements_in = "requirements.txt",
    requirements_txt = "requirements_lock.txt",
    requirements_windows = "requirements_windows.txt",
)

# This repository rule fetches the metadata for python packages we
# depend on. That data is required for the gazelle_python_manifest
# rule to update our manifest file.
# To see what this rule does, try `bazel run @modules_map//:print`
modules_mapping(
    name = "modules_map",
    exclude_patterns = [
        "^_|(\\._)+",  # This is the default.
        "(\\.tests)+",  # Add a custom one to get rid of the psutil tests.
    ],
    wheels = all_whl_requirements,
)

# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    pip_repository_name = "pip",
    # NOTE: We can pass a list just like in `bzlmod_build_file_generation` example
    # but we keep a single target here for regression testing.
    requirements = "//:requirements_lock.txt",
    # NOTE: we can use this flag in order to make our setup compatible with
    # bzlmod.
    use_pip_repository_aliases = True,
)

# Our gazelle target points to the python gazelle binary.
# This is the simple case where we only need one language supported.
# If you also had proto, go, or other gazelle-supported languages,
# you would also need a gazelle_binary rule.
# See https://github.com/bazelbuild/bazel-gazelle/blob/master/extend.rst#example
gazelle(
    name = "gazelle",
    data = GAZELLE_PYTHON_RUNTIME_DEPS,
    gazelle = "@rules_python_gazelle_plugin//python:gazelle_binary",
)

filegroup(
    name = "migration_files",
    srcs = glob([
        "migrations/**",
    ]),
)

filegroup(
    name = "instance",
    srcs = glob([
        "instance/*.ini",
    ]),
)

filegroup(
    name = "template",
    srcs = glob([
        "source/templates/403.html",
    ]),
)

py_library(
    name = "english_learning",
    srcs = [
        "config.py",
        "instance/config.py",
        "main.py",
    ],
    visibility = ["//:__subpackages__"],
    deps = [
        "//source",
    ] + all_requirements,
)

py_binary(
    name = "english_learning_bin",
    srcs = [
        "config.py",
        "instance/config.py",
        "main.py",
    ],
    data = [
        ":instance",
        ":migration_files",
        ":template",
    ],
    main = "main.py",
    visibility = ["//:__subpackages__"],
    deps = [":english_learning"],
)

py_library(
    name = "conftest",
    testonly = True,
    srcs = ["conftest.py"],
    visibility = ["//:__subpackages__"],
    deps = [
        "//source",
        "//source/models",
        "@pip//pytest",
    ],
)

py3_image(
    name = "base_binary_image",
    srcs = [
        "config.py",
        "instance/config.py",
        "main.py",
    ],
    data = [
        ":instance",
        ":migration_files",
        ":template",
    ],
    main = "main.py",
    visibility = ["//:__subpackages__"],
    deps = [":english_learning"],
)

container_push(
    name = "push",
    format = "Docker",
    image = ":base_binary_image",
    registry = "gcr.io",
    repository = "english-learning-396709/english-learning",
    skip_unchanged_digest = True,
    tag = "{GIT_COMMIT_COUNT}",
)
